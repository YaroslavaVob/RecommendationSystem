import os
import logging
from flask_sqlalchemy import SQLAlchemy
import pandas as pd

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ db
db = SQLAlchemy()

def init_db(app, db_path):
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    os.makedirs("logs", exist_ok=True)
    logging.basicConfig(
        filename='logs/init_db.log',
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )

    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(os.path.dirname(db_path), exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    app.config['SQLALCHEMY_DATABASE_URI'] = f"sqlite:///{db_path}"
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLAlchemy
    db.init_app(app)

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    try:
        with app.app_context():
            db.create_all()

        logging.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")
        
        success_msg = "[+] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞."
        print(success_msg)
        logging.info(success_msg)

    except Exception as e:
        error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}"
        print(error_msg)
        logging.exception(error_msg)
    
    finally:
        if 'db.session' in locals():
            db.session.remove()
            logging.info("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ.")

def populate_db():
    from db.users import User, Item, Action, RankerData
    import pandas as pd
    from datetime import datetime

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –ø—É—Å—Ç—ã–µ ‚Äî –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if db.session.query(User).first() or db.session.query(Item).first() or db.session.query(RankerData).first():
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        users_df = pd.read_parquet("model/data/cleaned_events.parquet").head(10000)
        items_df = pd.read_parquet("model/data/items.parquet").head(10000)
        ranker_df = pd.read_parquet("model/data/df_ranker.parquet").head(10000)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        unique_users = users_df['visitorid'].unique()
        db.session.bulk_save_objects([User(visitorid=int(uid)) for uid in unique_users])

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        db.session.bulk_save_objects([
            Item(
                itemid=row['itemid'],
                properties=row['property'],
                value_length=row['value_length'],
                depth=row['depth']
            ) for _, row in items_df.iterrows()
        ])

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        db.session.bulk_save_objects([
            Action(
                timestamp=pd.to_datetime(row['timestamp'], unit='ms') if 'timestamp' in row else datetime.now(),
                event=row['event'],
                itemid=row['itemid'],
                visitorid=row['visitorid'],
                dayofweek=row.get('dayofweek', 0),
                is_weekend=row.get('is_weekend', False),
                is_holiday=row.get('is_holiday', False),
                hour=row.get('hour', 0),
                view_count=row.get('view_count', 0),
                addtocart_count=row.get('addtocart_count', 0),
                purchase_count=row.get('purchase_count', 0),
                conversion=row.get('conversion', 0.0),
                avg_time_view=row.get('avg_time_view', 0.0),
                avg_time_addtocart=row.get('avg_time_addtocart', 0.0),
                avg_time_transaction=row.get('avg_time_transaction', 0.0),
                total_events=row.get('total_events', 0),
                items_count=row.get('items_count', 0),
                purchases=row.get('purchases', 0),
                session=row.get('session', 0.0),
                itemevents_by_visitor=row.get('itemevents_by_visitor', 0),
                itemviews_before_purchase=row.get('itemviews_before_purchase', 0.0),
                time_to_purchase=row.get('time_to_purchase', 0.0)
            ) for _, row in users_df.iterrows()
        ])

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
        db.session.bulk_save_objects([
            RankerData(**row) for row in ranker_df.to_dict(orient="records")
        ])

        db.session.commit()
        print("[+] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ë–î.")

    except Exception as e:
        db.session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
def get_user_data(user_id):
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º db –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from db.users import User, Action

    # –ó–¥–µ—Å—å –º—ã –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    try:
        user = db.session.query(User).filter_by(visitorid=user_id).first()
        if not user:
            raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –ó–¥–µ—Å—å –≥–ª–∞–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
        actions = db.session.query(Action).filter_by(visitorid=user.visitorid).all()

        return user, actions

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None